// Package template provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package template

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXbY/TRhD+K6uFDyA5iY+XCvylgrsejaoWiaNqK7hKiz1Olnpf2B2HpKf892p2Y8eO",
	"nQZEoVRqPsWz43menWdmdn3Dc6Os0aDR8+yG+3wJSoS/5w4EwktQthIIZCnA505alEbz7GCdFVBKDZ4J",
	"5tHVOdYOWGkcy8lN6gUTrPGd8oRbZyw4lOBj5FLUFb6ENQ6BLvaLTHqGS2BI/2sPBUPDCultJTbsR1DA",
	"ai8WAUAiqBAbNxZ4xj06qRd8mzQG4ZzY0LNUYgHzYgg8v2jwai3f1cBkARplKcExU4aFN8IDCwEiHdox",
	"2btbLY1TAnnG61oWPDkglPD1ZGEmWigyzgOXi8Y64B7dDon+JBQQVUEk3KR0EnRRbRh5j1Ia5gTWeIWb",
	"qpGjG/1lu9ZLfymhKpjHTUXqRhTpezCtBrcdlDzjt2b7apvtSm3Whh9qs024g3e1dFDw7FXc/F6vHuuk",
	"V0PXbSTz5i3kSKGPV/LH1DAV2bB+gwMUz/WxNime6zY6ZbAQCDOUCnrSsPfCs12sXuWQ+4Tcx7T7d5vn",
	"aN+Ika755PY43hnHuzi21P+t/DW1csjerp/3zfMJvd0AH99y23/NPoUumDVekmO7b1jjsL1Lo/HcVMYN",
	"w182S732zoNlV1ghxVKzJaxFAblUomJ3YLqYJuw1v3UZfq/53QArEMFR3N9v3fk2e5VOHj+ZXF7ffLO9",
	"e3tMayJ2KZSsNuPM4lqPGr3CymhvWXwP1QpQ5mLHA3StSKYnToqKJ/zcKJmzK6FJjLmyIu/q0OdzJf+E",
	"cTa0MuTiySo1s0ZqZCtR1eCJgxJrqYjG/TRNuJI6Pp21sFIjLMARrjMoItAh7ovdSg9X1+pNbPwCFg7I",
	"aliIAa1ifQoPH3coTMLjkIVHZ/6AI4VytV88USoxzGeqmBh8XKOrdq3HMAg0JNhL0L2TEr2XBS6HmL+Q",
	"uRlGwacHFSbTAdLpclgPcX5tMNYTsZY+1hlzYB14Ogn0IoIaO6mgRCIhPpBCOkZhpCF/ayhsvgSFg4G7",
	"5sSpkaE3OTptm3RG3XDOUkypSzMyZLuXmCtwK5kDs86sZAGe0SgNTejDjF0A0maT9lqVhFFcQAUxCbtA",
	"YQqgRJrq/DA6T/gKnI/wZ9N0mlLWjQUtrOQZvz9Np/djfyzDDJ+1YenJGo8nP2niwURnsYb3vdOw3RFd",
	"OA6/lGLiweNTU4QyyI1G0AFPWFvJPLw6e+vjwIqn56mz9QBk2xcYXQ3B4K3RPu7xXnr2j6H3cUdvuJT/",
	"B2k6zOpTUbAXMSPk83DMZ65piokqyAuOfeeciUXsa6WE27Q4rJNnFAtPxd2arumNvdKzm+bv/GIbQSsY",
	"+wK4CPbOdwA9xmbdaQnF3xRA//VQdU4oQHBE74ZLwqBKbC49Gd8T44c6Jh1Nxj9U9rfZ+UUzLsd5Hsz/",
	"7fWgRh6M3EENO98VTdB01AXZpal18UmKxrydUDThCxjp1WeArV4O0ElYfYRinbf/W3KlX6Sln//wmZV/",
	"BnhSdluPyP6zLbojug6PH657//WvXvqv4xj5sjV3+gT5jHUZ6+PUGUOvhBixaGpX8YwvEW02m1UmF9XS",
	"eMwepY/S2eqMb5Oui89m7QE1FVZOFSiwoKe5UcH7evtXAAAA//8GtXRblRUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
