// Package meme provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package meme

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xVTW/jNhD9KwTbIyMpTQsEOqYpAqMpAiTNaeEDI45sBhLJkCMnhqH/vhjqwx+Ss4fd",
	"ve3JFDmeN3zvzXDHC1s7a8Bg4PmOh2INtYzLvz1IhP+gBvpSEAqvHWpreH5wxhSU2kBgkgX0TYGNB1Za",
	"zwoK0WbFJKO4hAvuvHXgUUPMr2u5goWaJl/Eg1umA8M1sMbotwaYVmBQlxo8s2U8eJEBWMzCmgAqotL+",
	"AFdaX0vkOW8arbjguHXAcx7Qa7Pign9crOyFkXS/AXPYPQ5tBUf4wGml/8MHDmVSRFeHNkdlaIQ6Xnia",
	"tNuQ3svtAPKE26rjZwrVnR0BlhoqxQJuK6K6Y0CHs9j25RUKPLklQu0qiZCMGNPiWsE9vDXag+L5l1G7",
	"npij0pfiBK0VfN5Fn/pHsnrWNtFXoB7MOVeqBzMmJZ6UREhR1zCqwt5lYH2eI6NQ6AWFTtzSCq7nrBpd",
	"Kmc8+l1mPO/DX01z2jSNr6YYz4/3A0TZVBWjb7R7A0QCjq/r9Tdu+/x4P+0DoogqEAe+FKftMe0IyqNN",
	"aWfYGUp8Ar/RBTDn7UYrCIyaQFJUiKKtAGm8inHQCiaNYgoqiGOXuifQFVFjBUO39Vm54BvwoYO8TLIk",
	"IyqtAyOd5jm/SrLkilpP4jrKkMZ0tHI24KcPQkcEdYWB91HQsXoy7+Hb0hEKAW+s2sYGtwbBRAzpXKWL",
	"+Lf0NVizf6Fo9buHkuf8t3T/hKX9+5UeALTHoqFvIG4EZ03o7vRHdvnDkPeYs8OJeP4zy6YM3kjFHjsm",
	"KOavuZiFQfBGVlFG8Owf762PpgxNXUu/HXFYzy3KVSCjxs8lRXZKpjv6Wdy2BLKCGUXvAKOcHtBr2PTD",
	"tNcK1Blh+39F63hZA4In/B3XlJPsxAXvG6qrgJ+KIw6Inr4X+xG3uB1m2rSok6nRLieCZz9d8Id/T5S5",
	"AzwnC8VFSTuy4kzja0SXp2llC1mtbcD8OrvO0s0lb8VhSMjTqGkinU5o4cAkha1j5LL9GgAA//8DznnX",
	"4gkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
